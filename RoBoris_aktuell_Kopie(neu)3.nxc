// Go Boris go!!! /////////////////////////////////////////////////////////////

struct global {

    //Motoren
    int motorSpeedLeft;
    int motorSpeedRight;
    
    //Initialisierung
    int maxLight;
    int minLight;
    int calibrationCount;
    
    //Sensoren
    int max_sensor;
    unsigned int s1;
    unsigned int s2;
    unsigned int s3;
    
};


// kleine Helper Funktionen ///////////////////////////////////////////////////

// Maximum von zwei Int
inline int max(int a, int b) {
    return a > b ? a : b;
}

// Minimum von zwei Int
inline int min(int a, int b) {
    return a < b ? a : b;
}

// Garantiert dass ein Wert zwischen zwei anderen liegt
int range(int l, int v, int u){
    return max(l,min(u,v));
}

// Berechnet ob ein Wert zwischen zwei anderen liegt
inline bool in_range (int lower, int value, int upper){
    return ((value <= upper) && (value >=lower));
}


// Initialisierung ////////////////////////////////////////////////////////////

// Parameter initialisieren
sub initialize (global &g){
    //Initialisierung von Motorvariablen
    g.motorSpeedLeft = 0;
    g.motorSpeedRight = 0;
    
    //Kalibrierungsdaten
    g.maxLight = 0;
    g.minLight = 0;
    g.calibrationCount = 200;
    
    //Initialisierung der Sensordaten
    g.max_sensor = 580;
    
    //Bildschirm leeren
    ClearScreen();
}

// Sensoren einschalten
sub lightsOn() {
    SetSensorType(IN_1,SENSOR_TYPE_LIGHT_ACTIVE);
    SetSensorMode(IN_1,SENSOR_MODE_RAW);
    SetSensorType(IN_2,SENSOR_TYPE_LIGHT_ACTIVE);
    SetSensorMode(IN_2,SENSOR_MODE_RAW);
    SetSensorType(IN_3,SENSOR_TYPE_LIGHT_ACTIVE);
    SetSensorMode(IN_3,SENSOR_MODE_RAW);
}


// Update Routine /////////////////////////////////////////////////////////////

// Liest die Sensoren aus und kehrt die Werte um
sub update_sensors(global &g){
    int s1_raw = g.max_sensor - SENSOR_1;
    int s2_raw = g.max_sensor - SENSOR_2;
    int s3_raw = g.max_sensor - SENSOR_3;
    g.s1 = s1_raw <= 0 ? 0 : s1_raw;
    g.s2 = s2_raw <= 0 ? 0 : s2_raw;
    g.s3 = s3_raw <= 0 ? 0 : s3_raw;
}

//Berechnet eine annähernde Position der Linie
//0 => keine Linie
//10 => ganz links
//20 => genau in der Mitte
//30 => ganz rechts
int centroid(global &g) {
    
    // aktuelle Sensorwerte auslesen
    update_sensors(g);

    // Die Sensorwerte werden gewichtet und durch die gesamte Messung geteilt
    unsigned int masse = g.s1 + g.s2 + g.s3;
    unsigned int richtung = 10 * (g.s1 + 2*g.s2 + 3*g.s3);
    return richtung/masse;
}

// Lenkt den Boris entlang der Linie
sub steer(global &g) {

    // aktuelle Position der Linie
    int center = centroid(g);
    
    // keine Linie
    if(center == 0){
        PlaySound(SOUND_CLICK);
    } else {
        int c_norm = center - 20;
        int speed_l;
        int speed_r;
        
        // links der Linie
        if (c_norm < 0) {
            speed_l = 100;
            speed_r = 100 + 20 * c_norm;
            // speed_r = 100 - 2 * c_norm * cnorm; // <= quadratische Power (zum Testen)
        } 
        
        // rechts der Linie
        else {
            speed_l = 100 - 20 * c_norm;
            // speed_l = 100 - 2 * c_norm * cnorm; // <= quadratische Power (zum Testen)
            speed_r = 100;
        }

        // exponentielle Glättung
        g.motorSpeedLeft = (60*g.motorSpeedLeft + 40*speed_l) / 100;
        g.motorSpeedRight = (60*g.motorSpeedRight + 40*speed_r) / 100;
    }
}

// Motorgeschwindigkeit ändern
sub update_motors(global &g){

    // Schutz gegen möglichen Overflow
    g.motorSpeedLeft = range(-100, g.motorSpeedLeft, 100);
    g.motorSpeedRight = range(-100, g.motorSpeedRight, 100);
    
    OnFwd(OUT_A, (-1) * g.motorSpeedLeft);
    OnFwd(OUT_B, (-1) * g.motorSpeedRight);
}


// I don't know?? /////////////////////////////////////////////////////////////

/*
int ArrayMinMax(int &s[], int anfang, int ende, int &ret[]){
    int l = s[anfang];
    int u = s[anfang];
    int n = anfang+1;
    while(n < ende){
            u = max(u,s[n]);
            l = min(l,s[n]);
            n++;
    }
    ret[0] = l;
    ret[1] = u;
}


int feasible(){
    return 0;

}

bool is_feasible() {
    return true;
}
*/

// Debugging //////////////////////////////////////////////////////////////////

sub print_speed(global &g){
    TextOut(0,0,StrCat("Speed: ", NumToStr(g.motorSpeedLeft),",",NumToStr(g.motorSpeedRight)));
}


// Main Boris /////////////////////////////////////////////////////////////////

task main() {

    global g;
    initialize(g);
    lightsOn();

    while(true) {

        ClearScreen();
        steer(g);
        update_motors(g);

        Wait(10);
    }
}
